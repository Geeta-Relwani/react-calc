{"ast":null,"code":"var _jsxFileName = \"/home/dev/geeta-work/react-calc/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Button from './Components/Button.js';\nimport Input from './Components/Input.js';\nimport Clear from './Components/Clear';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addToInput = val => {\n      this.setState({\n        input: this.state.input + val\n      });\n    };\n\n    this.addZeroToInput = val => {\n      //if input is not empty that is there is a number before zero\n      if (this.state.input !== \"\") {\n        this.setState({\n          input: this.state.input + val\n        });\n      }\n    };\n\n    this.addDecimal = val => {\n      // add if there is no decimal already present\n      if (this.state.input.indexOf(\".\") === -1) {\n        this.setState({\n          input: this.state.input + val\n        });\n      }\n    };\n\n    this.clearInput = () => {\n      this.setState({\n        input: \"\"\n      });\n    };\n\n    this.add = () => {\n      this.state.previousNumber = this.state.input;\n      this.setState({\n        input: \"\"\n      });\n      this.state.operator = \"plus\";\n    };\n\n    this.sub = () => {\n      this.state.previousNumber = this.state.input;\n      this.setState({\n        input: \"\"\n      });\n      this.state.operator = \"sub\";\n    };\n\n    this.multiply = () => {\n      this.state.previousNumber = this.state.input;\n      this.setState({\n        input: \"\"\n      });\n      this.state.operator = \"multiply\";\n    };\n\n    this.divide = () => {\n      this.state.previousNumber = this.state.input;\n      this.setState({\n        input: \"\"\n      });\n      this.state.operator = \"divide\";\n    };\n\n    this.evaluate = () => {\n      this.state.currentNumber = this.state.input;\n\n      if (this.state.operator == \"plus\") {\n        this.setState({\n          input: parseInt(this.state.previousNumber) + parseInt(this.state.currentNumber)\n        });\n      } else if (this.state.operator == \"sub\") {\n        this.setState({\n          input: parseInt(this.state.previousNumber) - parseInt(this.state.currentNumber)\n        });\n      }\n\n      if (this.state.operator == \"multiply\") {\n        this.setState({\n          input: parseInt(this.state.previousNumber) * parseInt(this.state.currentNumber)\n        });\n      }\n\n      if (this.state.operator == \"divide\") {\n        this.setState({\n          input: parseInt(this.state.previousNumber) / parseInt(this.state.currentNumber)\n        });\n      }\n    };\n\n    this.state = {\n      input: \"\",\n      previousNumber: \"\",\n      nextNumber: \"\",\n      currentNumber: \"\",\n      operator: \"\"\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"calc-wraper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, this.state.input)), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Button, {\n      handleClick: this.addToInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"7\"), React.createElement(Button, {\n      handleClick: this.addToInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"8\"), React.createElement(Button, {\n      handleClick: this.addToInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"9\"), React.createElement(Button, {\n      id: \"operator\",\n      handleClick: this.divide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"/\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Button, {\n      handleClick: this.addToInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"4\"), React.createElement(Button, {\n      handleClick: this.addToInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"5\"), React.createElement(Button, {\n      handleClick: this.addToInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"6\"), React.createElement(Button, {\n      id: \"operator\",\n      handleClick: this.multiply,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"*\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Button, {\n      handleClick: this.addToInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"1\"), React.createElement(Button, {\n      handleClick: this.addToInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"2\"), React.createElement(Button, {\n      handleClick: this.addToInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"3\"), React.createElement(Button, {\n      id: \"operator\",\n      handleClick: this.add,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"+\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Button, {\n      handleClick: this.addDecimal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \".\"), React.createElement(Button, {\n      handleClick: this.addZeroToInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"0\"), React.createElement(Button, {\n      handleClick: this.evaluate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"=\"), React.createElement(Button, {\n      id: \"operator\",\n      handleClick: this.sub,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"-\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Clear, {\n      handleClear: this.clearInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/dev/geeta-work/react-calc/src/App.js"],"names":["React","Component","Button","Input","Clear","App","constructor","props","addToInput","val","setState","input","state","addZeroToInput","addDecimal","indexOf","clearInput","add","previousNumber","operator","sub","multiply","divide","evaluate","currentNumber","parseInt","nextNumber","render"],"mappings":"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","sourcesContent":["import React,{ Component} from 'react';\nimport './App.css';\nimport Button from './Components/Button.js'\nimport Input from './Components/Input.js'\nimport Clear from './Components/Clear'\n\nclass App extends Component{\nconstructor(props){\n  super(props);\n  this.state ={\n    input: \"\",\n    previousNumber: \"\",\n    nextNumber: \"\",\n    currentNumber: \"\",\n    operator: \"\",\n  }\n}\n\naddToInput = val =>{\n  this.setState({\n    input: this.state.input+val,\n  })\n}\n\naddZeroToInput = val =>{\n//if input is not empty that is there is a number before zero\nif(this.state.input !== \"\"){\n  this.setState({\n    input: this.state.input+val,\n  })\n}\n}\n\naddDecimal = val =>{\n  // add if there is no decimal already present\n  if(this.state.input.indexOf(\".\") === -1){\n    this.setState({\n      input: this.state.input+val,\n    })\n  }\n}\n\nclearInput = ()=>{\n  this.setState({\n    input: \"\",\n  })\n}\n\nadd = ()=>{\n  this.state.previousNumber = this.state.input;\n  this.setState({input: \"\"});\n  this.state.operator = \"plus\";\n};\n\nsub = ()=>{\n  this.state.previousNumber = this.state.input;\n  this.setState({input: \"\"});\n  this.state.operator = \"sub\";\n};\n\nmultiply = ()=>{\n  this.state.previousNumber = this.state.input;\n  this.setState({input: \"\"});\n  this.state.operator = \"multiply\";\n};\n\ndivide = ()=>{\n  this.state.previousNumber = this.state.input;\n  this.setState({input: \"\"});\n  this.state.operator = \"divide\";\n};\nevaluate= ()=>{\n  this.state.currentNumber = this.state.input;\n  \n  if(this.state.operator == \"plus\"){\n    this.setState({\n      input:\n      parseInt(this.state.previousNumber)+\n      parseInt(this.state.currentNumber)\n    })\n  }\n\n  else if(this.state.operator == \"sub\"){\n    this.setState({\n      input:\n      parseInt(this.state.previousNumber)-\n      parseInt(this.state.currentNumber)\n    })\n  }\n\n  if(this.state.operator == \"multiply\"){\n    this.setState({\n      input:\n      parseInt(this.state.previousNumber)*\n      parseInt(this.state.currentNumber)\n    })\n  }\n\n  if(this.state.operator == \"divide\"){\n    this.setState({\n      input:\n      parseInt(this.state.previousNumber)/\n      parseInt(this.state.currentNumber)\n    })\n  }\n}\n\n  render(){\n    return(\n      <div className=\"App\">\n        <div className=\"calc-wraper\">\n          <div className=\"row\">\n            <Input>{this.state.input}</Input>\n          </div>\n          <div className =\"row\">\n            <Button handleClick = {this.addToInput}>7</Button>\n            <Button handleClick = {this.addToInput}>8</Button>\n            <Button handleClick = {this.addToInput}>9</Button>\n            <Button id=\"operator\" handleClick={this.divide}>/</Button>\n          </div>\n          <div className =\"row\">\n            <Button handleClick = {this.addToInput}>4</Button>\n            <Button handleClick = {this.addToInput}>5</Button>\n            <Button handleClick = {this.addToInput}>6</Button>\n            <Button id=\"operator\"handleClick={this.multiply}>*</Button>\n          </div>\n          <div className =\"row\">\n            <Button handleClick = {this.addToInput}>1</Button>\n            <Button handleClick = {this.addToInput}>2</Button>\n            <Button handleClick = {this.addToInput}>3</Button>\n            <Button id=\"operator\" handleClick={this.add}>+</Button>\n          </div>\n          <div className =\"row\">\n            <Button handleClick = {this.addDecimal}>.</Button>\n            <Button handleClick= {this.addZeroToInput}>0</Button>\n            <Button handleClick={this.evaluate}>=</Button>\n            <Button id=\"operator\" handleClick={this.sub}>-</Button>\n          </div>\n          <div className=\"row\">\n            <Clear handleClear={this.clearInput}/>\n          </div>\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}